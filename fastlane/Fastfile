fastlane_version '2.53.1'

before_all do
  # Load root-level shared .env
  Dotenv.overload '../.env'

  load_secrets

  # Pull all tags
  git_pull(only_tags: true)
end

after_all do
  clean_env
end

private_lane :ensure_clean_env do
  env_status = sh("cd ../ && git status .env .env.production  --porcelain")
  clean = env_status.empty?

  UI.user_error!("You should not have local changes to .env or .env.production") unless clean
end

private_lane :clean_env do
  sh("cd ../ && git checkout .env .env.production")
end

private_lane :ensure_secrets_file_exists do
  file_exists = File.exist? File.expand_path "../.env.secrets"

  UI.user_error!("You appear to be missing a .env.secrets file") unless file_exists
end

private_lane :load_secrets do
  ensure_secrets_file_exists
  ensure_clean_env

  # Merge secrets with the default .env file
  production = Dotenv.parse("../.env.production")
  debug = Dotenv.parse("../.env")
  secrets = Dotenv.parse('../.env.secrets')

  production.merge!(secrets)
  debug.merge!(secrets)

  production_env = "../.env.production"
  debug_env = "../.env"

  File.open(production_env, 'w') do |file|
    production.each{ |k, v| file.write("#{k}=#{v}\n") }
  end

  File.open(debug_env, 'w') do |file|
    debug.each{ |k, v| file.write("#{k}=#{v}\n") }
  end
end

desc "Creates a Github Release"
private_lane :create_github_release do |options|
  UI.user_error!("platform is missing") unless options[:platform]
  upload_assets = options[:upload_assets] ? options[:upload_assets] : []

  set_github_release(
    repository_name: "cds-snc/covid-shield-mobile",
    api_token: ENV["GITHUB_TOKEN"],
    name: "#{options[:platform]}  v#{ENV['APP_VERSION_NAME']} (#{ENV['APP_VERSION_CODE']})",
    tag_name: "#{options[:platform]}-v#{ENV['APP_VERSION_NAME']}-#{ENV['APP_VERSION_CODE']}",

    description: default_changelog,
    commitish: "master",
    upload_assets: upload_assets
  )
end

desc "Returns a default changelog."
private_lane :default_changelog do |options|
  format = (options[:simple] ? "- %b" : "- %b [%s]")

  changelog = changelog_from_git_commits(
    merge_commit_filtering: "only_include_merges",
    pretty: format
  ), Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog

  clean = changelog.first.gsub("- \n", "")
  puts clean
  clean
end

private_lane :ensure_keystore_properties do
  file_exists = File.exist? File.expand_path "../android/keystore.properties"

  UI.user_error!("keystore.properties file is missing!") unless file_exists
end

private_lane :ensure_build_directory do
  UI.message("Checking for build directories")

  unless File.directory?('../build/ios')
    FileUtils.mkdir_p('../build/ios')
  end
  unless File.directory?('../build/android')
    FileUtils.mkdir_p('../build/android')
  end
end

def version_string(version_number, build_number)
  "#{version_number} (#{build_number})"
end

platform :ios do
  desc "Submit a new Covid Alert beta build to Apple TestFlight"
  lane :beta do
    # ensure_git_branch
    ensure_build_directory

    increment_build_number(
      build_number: ENV["APP_VERSION_CODE"],
      xcodeproj: "ios/CovidShield.xcodeproj"
    )

    output_directory = File.expand_path('../build/ios')

    match(
      git_url: ENV["CERTS_REPO"],
      app_identifier: ENV["APP_ID_IOS"],
      username: ENV["APPLE_ID"],
      type: "appstore",
      readonly: true
    )

    build_app(
      scheme: "CovidShield",
      workspace: "./ios/CovidShield.xcworkspace",
      export_method: "app-store",
      output_directory: output_directory,
      export_options: {
        provisioningProfiles: {
          ENV["APP_ID_IOS"] => ENV["PROFILE"]
        }
      }
    )

    groups = ENV["TEST_GROUPS"].split(",")
    upload_to_testflight(
      groups: groups,
      changelog: default_changelog(simple: true),
      ipa: "#{output_directory}/CovidShield.ipa"
    )

    create_github_release(
      platform: 'iOS',
      upload_assets: ["#{output_directory}/CovidShield.ipa", "#{output_directory}/CovidShield.app.dSYM.zip"]
    )
  end

  desc "Builds a local iOS adhoc .ipa"
  lane :local do
    ensure_build_directory

    match(
      git_url: ENV["CERTS_REPO"],
      app_identifier: ENV["APP_ID_IOS"],
      username: ENV["APPLE_ID"],
      type: "adhoc",
      readonly: true
    )

    output_directory = File.expand_path('../build/ios')

    build_app(
      scheme: "CovidShield",
      workspace: "./ios/CovidShield.xcworkspace",
      export_method: "ad-hoc",
      output_directory: output_directory,
      export_options: {
        provisioningProfiles: {
          ENV["APP_ID_IOS"] => ENV["PROFILE_ADHOC"]
        }
      }
    )
  end
end

platform :android do
  private_lane :build do |options|
    task = (options[:bundle] ? "bundle" : "assemble")
    properties = (options[:properties] ? options[:properties] : {})
    buildType = (options[:buildType] ? options[:buildType] : "Release")

    gradle(
      task: task,
      build_type: buildType,
      project_dir: 'android/',
      properties: properties
    )
  end

  desc "Pushes a new build to Google Play Internal Testing Track"
  lane :internal do
    # ensure_git_branch
    ensure_keystore_properties

    versionCode = ENV["APP_VERSION_CODE"]
    versionName = version_string(ENV['APP_VERSION_NAME'], ENV['APP_VERSION_CODE'])

    build(bundle: true, properties: {
        "versionCode" => versionCode,
        "versionName" => versionName
      }
    )

    upload_to_play_store(
      track: 'internal',
      skip_upload_apk: true,
      aab: lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
      version_name: versionName,
      version_code: versionCode
    )

    create_github_release(platform: "Android")
  end

  desc "Builds a local Release .apk for Android"
  lane :local do
    ensure_keystore_properties
    ensure_build_directory
    build

    APK_LOCATION = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    sh "cp #{APK_LOCATION} ../build/android/"
  end

  desc "Builds a local Debug .apk for Android"
  lane :local_debug do
    gradle(
      task: "assembleDebug",
      flags: "-DbundleInDebug=true",
      project_dir: 'android/',
    )

    APK_LOCATION = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    sh "cp #{APK_LOCATION} ../build/android/"
  end
end
