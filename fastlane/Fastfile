fastlane_version '2.53.1'

before_all do
  # Load root-level shared .env
  Dotenv.overload '../.env'

  # Pull all tags
  git_pull(only_tags: true)
end

desc "Creates a Github Release"
lane :create_github_release do |options|
  set_github_release(
    repository_name: "cds-snc/covid-shield-mobile",
    api_token: ENV["GITHUB_TOKEN"],
    name: "#{options[:platform]}  v#{ENV['APP_VERSION_NAME']} (#{ENV['APP_VERSION_CODE']})",
    tag_name: "#{options[:platform]}-v#{ENV['APP_VERSION_NAME']}-#{ENV['APP_VERSION_CODE']}",

    description: default_changelog,
    commitish: "master",
  )
end

desc "Returns a default changelog."
lane :default_changelog do |options|
  format = (options[:simple] ? "- %b" : "- %b [%s]")

  changelog = changelog_from_git_commits(
    merge_commit_filtering: "only_include_merges",
    pretty: format
  ), Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog

  clean = changelog.first.gsub("- \n", "")
  puts clean
  clean
end

lane :ensure_keystore_properties do
  file_exists = File.exist? File.expand_path "../android/keystored.properties"

  UI.user_error!("keystore.properties file is missing!") unless file_exists
end

def version_string(version_number, build_number)
  "#{version_number} (#{build_number})"
end

platform :ios do
  desc "Submit a new Covid Alert beta build to Apple TestFlight"
  lane :beta do
    ensure_git_branch

    get_certificates(
      output_path: "fastlane/certs"
    )
    get_provisioning_profile(
      output_path: "fastlane/certs"
    )

    build_app(
      scheme: "CovidShield",
      workspace: "./ios/CovidShield.xcworkspace",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          ENV["APP_ID_IOS"] => ENV["PROFILE"]
        }
      }
    )

    groups = ENV["TEST_GROUPS"].split(",")
    upload_to_testflight(
      groups: groups,
      changelog: default_changelog(simple: true),
      app_version: ENV["APP_VERSION_NAME"],
      build_number: ENV["APP_VERSION_CODE"],
    )

    create_github_release(platform: 'iOS')
  end

  desc "Builds a local iOS adhoc .ipa"
  lane :local do
    get_certificates(
      output_path: "fastlane/certs"
    )
    get_provisioning_profile(
      adhoc: true,
      provisioning_name: ENV["PROFILE_ADHOC"],
      output_path: "fastlane/certs"
    )

    build_app(
      scheme: "CovidShield",
      workspace: "./ios/CovidShield.xcworkspace",
      export_method: "ad-hoc",
      output_directory: "./build",
      export_options: {
        provisioningProfiles: {
          ENV["APP_ID_IOS"] => ENV["PROFILE_ADHOC"]
        }
      }
    )
  end
end

platform :android do
  private_lane :build do |options|
    task = (options[:bundle] ? "bundle" : "assemble")
    properties = (options[:properties] ? options[:properties] : {})
    buildType = (options[:buildType] ? options[:buildType] : "Release")

    gradle(
      task: task,
      build_type: buildType,
      project_dir: 'android/',
      properties: properties
    )
  end

  desc "Pushes a new build to Google Play Internal Testing Track"
  lane :internal do
    ensure_git_branch
    ensure_keystore_properties

    versionCode = ENV["APP_VERSION_CODE"]
    versionName = version_string(ENV['APP_VERSION_NAME'], ENV['APP_VERSION_CODE'])

    build(bundle: true, properties: {
        "versionCode" => versionCode,
        "versionName" => versionName
      }
    )

    upload_to_play_store(
      track: 'internal',
      skip_upload_apk: true,
      aab: lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    )

    create_github_release(platform: "Android")
  end

  desc "Builds a local Release .apk for Android"
  lane :local do
    build

    APK_LOCATION = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    sh "cp #{APK_LOCATION} ../build/"
  end

  desc "Builds a local Debug .apk for Android"
  lane :local_debug do
    gradle(
      task: "assembleDebug",
      flags: "-DbundleInDebug=true",
      project_dir: 'android/',
    )

    APK_LOCATION = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    sh "cp #{APK_LOCATION} ../build/"
  end
end
